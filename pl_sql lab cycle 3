1.	Write a PL/SQL block to read a number and check whether it is a palindrome or not.

DECLARE
n NUMBER;
m NUMBER;
d NUMBER;
sum1 NUMBER:=0;
BEGIN
n:=&n;
m:=n;
WHILE (n>0) LOOP
d:=mod(n,10);
sum1:=(sum1*10)+d;
n:=trunc(n/10);
END LOOP;

IF(m=sum1) THEN
DBMS_OUTPUT.PUT_LINE('It is a palindrome');
ELSE
DBMS_OUTPUT.PUT_LINE('It is not a palindrome');
END IF;
END;


SQL> @C:\Users\exam2\Desktop\PL_SQL\palin.sql;
 21  /
Enter value for n: 234
old   7:        n:=&n;
new   7:        n:=234;
It is not a palindrome

PL/SQL procedure successfully completed.

SQL> /
Enter value for n: 121
old   7:        n:=&n;
new   7:        n:=121;
It is a palindrome

PL/SQL procedure successfully completed.




2.	Write a PL/SQL Program to print the first n fibonacci numbers.

DECLARE
f0 NUMBER:=0;
f1 NUMBER:=1;
f2 NUMBER;
n NUMBER;
i NUMBER;
BEGIN
DBMS_OUTPUT.PUT_LINE(f0);
DBMS_OUTPUT.PUT_LINE(f1);
n:=&n;
FOR i in 3..n LOOP
f2:=f0+f1;
f0:=f1;
f1:=f2;
DBMS_OUTPUT.PUT_LINE(f2);
END LOOP;
END;

SQL> @C:\Users\exam2\Desktop\PL_SQL\fiba.sql;
 21  /
Enter value for n: 5
old  10:        n:=&n;
new  10:        n:=5;
0
1
1
2
3

PL/SQL procedure successfully completed.

SQL> /
Enter value for n: 9
old  10:        n:=&n;
new  10:        n:=9;
0
1
1
2
3
5
8
13
21

PL/SQL procedure successfully completed.




3.	Write a PL/SQL block which will accept a number and checks if it is a prime number or not. 

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     n number:=&n;
  3     flag number:=0;
  4  BEGIN
  5     FOR i in 2..n/2 LOOP
  6             IF mod(n,i)=0 THEN
  7                     flag:=flag+1;
  8             ELSE
  9                     flag:=0;
 10             END IF;
 11     END LOOP;
 12     IF flag=0 THEN
 13             dbms_output.put_line('It is a prime number');
 14     ELSE
 15             dbms_output.put_line('It is not a prime number');
 16     END IF;
 17* END;
 
SQL> /
Enter value for n: 37
old   2:        n number:=&n;
new   2:        n number:=37;
It is a prime number

PL/SQL procedure successfully completed.

SQL> /
Enter value for n: 12
old   2:        n number:=&n;
new   2:        n number:=12;
It is not a prime number

PL/SQL procedure successfully completed.





4.	Write a PL/SQL block which will accept two numbers and find out their LCM and HCF. The output should be stored in a table called DEMO_TAB.
DEMO_TAB
Number1	Number2	LCM	HCF

CREATE TABLE table_name
( 
  n1 NUMBER,
  n2 NUMBER,
  hcf NUMBER,
  lcm NUMBER
);

DECLARE
 n1 NUMBER:=&n1;
 n2 NUMBER:=&n2;
 p NUMBER;
 q NUMBER;
 t NUMBER;
 lcm NUMBER;
 hcf NUMBER;
BEGIN
  p:=n1;
  q:=n2;
  WHILE mod(n2,n1)!=0 LOOP
     t:=mod(n2,n1);
     n2:=n1;
     n1:=t;
  END LOOP;
hcf:=n1;
lcm:=(p*q)/hcf;
DBMS_OUTPUT.PUT_LINE('LCM OF '||p ||'and'||q ||'is:'|| lcm);
DBMS_OUTPUT.PUT_LINE('HCF OF '||p ||'and'||q ||'is:'|| hcf);
INSERT INTO table_name
(n1, n2, hcf , lcm )
VALUES
(p , q , hcf , lcm );
END;
/

SQL> @C:\Users\acer\OneDrive\Desktop\4th.sql;

Table created.

Enter value for n1: 12
old   2:  n1 NUMBER:=&n1;
new   2:  n1 NUMBER:=12;
Enter value for n2: 2
old   3:  n2 NUMBER:=&n2;
new   3:  n2 NUMBER:=2;
LCM OF 12and2is:12
HCF OF 12and2is:2

PL/SQL procedure successfully completed.

SQL> select * from table_name;

        N1         N2        HCF        LCM
---------- ---------- ---------- ----------
        12          2          2         12





5.	Write a Pl/SQL program using FOR loop to insert ten rows into a database table.

SQL> create table t ( x int, y char(50) );

Table created.

SQL> 
  1  BEGIN
  2     for i in 1..10 LOOP
  3             insert into t values(i,'x');
  4     END LOOP;
  5* END;
SQL> /

PL/SQL procedure successfully completed.
SQL> select * from t;

         X Y
---------- --------------------------------------------------
         1 x
         2 x
         3 x
         4 x
         5 x
         6 x
         7 x
         8 x
         9 x
        10 x

10 rows selected.

SQL> select count(*) from t;

  COUNT(*)
----------
        10
        
        
        
    
6.Consider the following relation schemas
Inventory
    Product_ID	Product_name	Quantity

Purchase_Record
    Product_ID	Status	Date
Write a PL/SQL block to read the quantity of a product from inventory and if it is > 0 reduce the quantity by 1 
and record the status of purchase of that product as ‘PURCHASED’. Otherwise record the status of purchase of that 
product as ‘OUT OF STOCK’. While recording the status of a purchase, record the date of transaction.

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     q number;
  3     id number:=&id;
  4  BEGIN
  5     select quantity into q from inventory where id=product_id;
  6     IF q>0 THEN
  7             q:=q-1;
  8             insert into purchase_record values (id,'PURCHASED',sysdate);
  9             update inventory set quantity=q where id=product_id;
 10     ELSE
 11             insert into purchase_record values (id,'OUT OF STOCK',sysdate);
 12     END IF;
 13* END;
SQL> /
Enter value for id: 1001
old   3:        id number:=&id;
new   3:        id number:=1001;

PL/SQL procedure successfully completed.

SQL> select * from inventory;

PRODUCT_ID PRODUCT_NA   QUANTITY
---------- ---------- ----------
      1001 pen                 1
      1002 pencil              1
      1003 eraser              0

SQL> select * from purchase_record;

PRODUCT_ID STATUS     P_DATE
---------- ---------- ---------
      1001 PURCHASED  07-SEP-22
      
SQL> /
Enter value for id: 1002
old   3:    id number:=&id;
new   3:    id number:=1002;

PL/SQL procedure successfully completed.

SQL> select * from inventory;

PRODUCT_ID PRODUCT_NA   QUANTITY
---------- ---------- ----------
      1001 pen                 1
      1002 pencil              0
      1003 eraser              0

SQL> select * from purchase_record;

PRODUCT_ID STATUS     P_DATE
---------- ---------- ---------
      1001 PURCHASED  07-SEP-22
      1002 PURCHASED  07-SEP-22
      1002 PURCHASED  07-SEP-22





7.	Create a table employee with eno, ename, and basic_pay attributes, insert 3 to 4 records and 
write a PL/SQL block to calculate the Gross salary & Net salary for an employee for the following conditions:
	HRA is 15% of basic.
	DA is 62% of basic.
	PF is 780/- if gross salary exceeds 8000, otherwise 600/-.
	Professional tax is 2% of basic.
and then print the employee no, name, hra, da, pf, ptax, gross salary & net salary for that employee.

SQL> create table employee
  2  (
  3  eno number,
  4  ename varchar(10),
  5  b_p number
  6  )
  7  ;

Table created.

SQL> insert into employee values (1000,'keerthi',200000);

1 row created.

SQL> insert into employee values (1001,'madhavi',210000);

1 row created.

SQL> insert into employee values (1002,'satwika',220000);

1 row created.

SQL> insert into employee values (1003,'prapurna',230000);

1 row created.

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     hra number;
  3     da number;
  4     pf number;
  5     pt number;
  6     bp number;
  7     gs number;
  8     ns number;
  9     id number:=&id;
 10     empno number;
 11     empname varchar(10);
 12  BEGIN
 13     select b_p,eno,ename into bp,empno,empname from employee where id=eno;
 14     hra:=0.15*bp;
 15     da:=0.62*bp;
 16     gs:=bp+hra+da;
 17     IF gs>8000 THEN
 18             pf:=780;
 19     ELSE
 20             pf:=600;
 21     END IF;
 22     pt:=0.02*bp;
 23     ns:=bp-gs-pt;
 24     DBMS_OUTPUT.PUT_LINE(empno||' '||empname||' '||bp||' '||hra||' '||da||' '||pf||' '||gs||' '||ns)
 25* END;
SQL> /
Enter value for id: 1000
old   9:    id number:=&id;
new   9:    id number:=1000;
1000 keerthi 200000 30000 124000 780 354000 -158000

PL/SQL procedure successfully completed.

SQL> /
Enter value for id: 1001
old   9:    id number:=&id;
new   9:    id number:=1001;
1001 madhavi 210000 31500 130200 780 371700 -165900

PL/SQL procedure successfully completed.





8.	Consider the following relation schemas
Emp
empid	name	salary	dno
Del_History
dno	Rows_deleted	date
Write a PL/SQL block to delete records of all employees who belong to a particular department and then record the dno, no of rows deleted
and date on which deletion occurred in the Del_History table using implicit cursors. 

SQL> ed
Wrote file afiedt.buf

  1  create table emp1
  2  (
  3  empid number,
  4  name varchar(10),
  5  salary number,
  6* dno number)
SQL> /

Table created.

SQL> create table del_history
  2  (
  3  dno number,
  4  rows_deleted number,
  5  d_of_j date);

Table created.

SQL> insert into emp1 values (100,'keerthi',100000,1);

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into emp1 values (101,'madhavi',100000,1)
SQL> /

1 row created.

SQL> insert into emp1 values (102,'satwika',100000,1)'
  2  ed
  3  
SQL> 
SQL> ed
Wrote file afiedt.buf

  1* insert into emp1 values (102,'satwika',100000,1)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into emp1 values (103,'prapurna',100000,2)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into emp1 values (104,'nithya',100000,3)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     dn number:=&dn;
  3     c number;
  4  BEGIN
  5     delete from emp1 where dno=dn;
  6     IF sql%found THEN
  7             c:=sql%rowcount;
  8             insert into del_history values(dn,c,sysdate);
  9     END IF;
 10* END;
SQL> /
Enter value for dn: 1
old   2:    dn number:=&dn;
new   2:    dn number:=1;

PL/SQL procedure successfully completed.

SQL> select * from del_history;

       DNO ROWS_DELETED D_OF_J
---------- ------------ ---------
         1            3 07-SEP-22




9.	Given the table EMPLOYEE (EmpNo, Name, Salary, Designation, DeptID) write a cursor to select the five highest and lowest paid employees from the table.

SQL> create table employee1
  2  (
  3  empno number,
  4  name varchar(10),
  5  salary number,
  6  designation varchar(10),
  7  deptid number);

Table created.

SQL> insert into employee1 values (100,'keerthi',10000,'ceo',1);

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (101,'madhavi',10000,'manager',2)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (102,'satwika',10000,'hr',3)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (103,'prapurna',10000,'hr',4)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (104,'nithya',10000,'hr',5)
  2  /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (105,'chandu',10000,'manager',6)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (106,'siri',10000,'emp',6)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (107,'yamini',13000,'emp',7)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (108,'rishi',18000,'emp',8)
SQL> /

1 row created.

SQL> ed
Wrote file afiedt.buf

  1* insert into employee1 values (109,'neha',19000,'emp',8)
SQL> /

1 row created.

SQL> select * from employee1;

     EMPNO NAME           SALARY DESIGNATIO     DEPTID
---------- ---------- ---------- ---------- ----------
       100 keerthi         10000 ceo                 1
       101 madhavi         10000 manager             2
       102 satwika         10000 hr                  3
       103 prapurna        10000 hr                  4
       104 nithya          10000 hr                  5
       105 chandu          10000 manager             6
       106 siri            10000 emp                 6
       107 yamini          13000 emp                 7
       108 rishi           18000 emp                 8
       109 neha            19000 emp                 8

10 rows selected.

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     i number:=1;
  3     n varchar(10);
  4     s number;
  5     cursor h_n is select name,salary from employee1 order by salary;
  6  BEGIN
  7     open h_n;
  8     LOOP
  9             fetch h_n into n,s;
 10             dbms_output.put_line(n||s);
 11             i:=i+1;
 12             exit when i>5;
 13     end loop;
 14* END;
SQL> /
keerthi10000
madhavi10000
satwika10000
prapurna10000
nithya10000

PL/SQL procedure successfully completed.

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     i number:=1;
  3     n varchar(10);
  4     s number;
  5     cursor h_n is select name,salary from employee1 order by salary desc;
  6  BEGIN
  7     open h_n;
  8     LOOP
  9             fetch h_n into n,s;
 10             dbms_output.put_line(n||s);
 11             i:=i+1;
 12             exit when i>5;
 13     end loop;
 14* END;
SQL> /
neha19000
rishi18000
yamini13000
keerthi10000
madhavi10000

PL/SQL procedure successfully completed.




10.	Consider the following relation schemas

Bank_Main
Acc_no	Name	Address	Acc-type	Curr_balance
Bank_Trans
Acc_no	Tr_type	Tr_date	Tr_amt	Upd_flag

Where acc_type is S – savings C- current 
Tr_type is D – deposit W – withdrawal 
Write a PL/SQL block to update master table’s (i.e., Bank_Main) curr_balance field with transaction details from transaction file (i.e., Bank_Trans)
and also change the status of the Upd_flag field of transaction table to ‘Y’ once the updation is complete.





11.	Write a PL/SQL block to handle the following built-in exceptions
no_data_found
too_many_rows
zero_divide

SQL> select * from instructor;

ID    NAME                 DEPT_NAME                SALARY
----- -------------------- -------------------- ----------
10101 Srinivasan           Comp. Sci.                65000
12121 Wu                   Finance                   90000
15151 Mozart               Music                     40000
22222 Einstein             Physics                   95000
32343 El Said              History                   60000
33456 Gold                 Physics                   87000
45565 Katz                 Comp. Sci.                75000
58583 Califieri            History                   62000
76543 Singh                Finance                   80000
76766 Crick                Biology                   72000
83821 Brandt               Comp. Sci.                92000

ID    NAME                 DEPT_NAME                SALARY
----- -------------------- -------------------- ----------
98345 Kim                  Elec. Eng.                80000

12 rows selected.

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     n number:=10;
  3     m number;
  4     i instructor.id%type;
  5  BEGIN
  6     select id into i from instructor;
  7     m:=n/0;
  8     select id into i from instructor where name='prapurna';
  9     EXCEPTION
 10             WHEN TOO_MANY_ROWS THEN
 11     DBMS_OUTPUT.PUT_LINE('more than one row selected');
 12             WHEN ZERO_DIVIDE THEN
 13     DBMS_OUTPUT.PUT_LINE('divided by zero');
 14             WHEN NO_DATA_FOUND THEN
 15     DBMS_OUTPUT.PUT_LINE('no data found');
 16* END;
SQL> /
more than one row selected

PL/SQL procedure successfully completed.

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     n number:=10;
  3     m number;
  4     i instructor.id%type;
  5  BEGIN
  6     m:=n/0;
  7     select id into i from instructor;
  8     select id into i from instructor where name='prapurna';
  9     EXCEPTION
 10             WHEN TOO_MANY_ROWS THEN
 11     DBMS_OUTPUT.PUT_LINE('more than one row selected');
 12             WHEN ZERO_DIVIDE THEN
 13     DBMS_OUTPUT.PUT_LINE('divided by zero');
 14             WHEN NO_DATA_FOUND THEN
 15     DBMS_OUTPUT.PUT_LINE('no data found');
 16* END;
SQL> /
divided by zero

PL/SQL procedure successfully completed.

SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2     n number:=10;
  3     m number;
  4     i instructor.id%type;
  5  BEGIN
  6     select id into i from instructor where name='prapurna';
  7     m:=n/0;
  8     select id into i from instructor;
  9     EXCEPTION
 10             WHEN TOO_MANY_ROWS THEN
 11     DBMS_OUTPUT.PUT_LINE('more than one row selected');
 12             WHEN ZERO_DIVIDE THEN
 13     DBMS_OUTPUT.PUT_LINE('divided by zero');
 14             WHEN NO_DATA_FOUND THEN
 15     DBMS_OUTPUT.PUT_LINE('no data found');
 16* END;
SQL> /
no data found

PL/SQL procedure successfully completed.




12.	Write a PL/SQL block to check whether the quantity of any product in Inventory table is < 0. If so, using an exception display
relevant message and update quantity to 0.

Inventory
Product_ID	Product_name	Quantity

